package com.aj.complexity;

/**
 * @author aka_after_jason
 * @date 12/2/20
 */

/**
 * 算法复杂度
 */
public class AJ_Complexity {

    /**
     * 什么是算法？
     * 算法是用于解决特定问题的一系列的执行步骤
     * 使用不同的算法，解决同一个问题，效率可能相差非常大
     *
     * 如何判断一个算法的好坏？
     * 1.比较不同算法对同一组输入的执行处理时间，这种方案也叫做：事后统计法
     *
     * 一般从以下维度来评估算法的优劣：
     * 1.正确性、可读性、健壮性（对不合理输入的反映能力和处理能力）
     * 时间复杂度(time complexity)：估算程序指令的执行次数（执行时间）
     * 空间复杂度(space comlexity): 估算所占用的存储空间
     *
     * 大O表示法（Big O）
     * 一般用大O表示法来描述复杂度，它表示的是数据规模 n 对应的复杂度
     * 忽略常数、系数、低阶
     * 9 >> O(1)
     * 2n+3 >> O(n)
     * n^2+2n+6 >> O(n^2)
     * 4n^3+3n^2+22n+100 >> O(n^3)
     *
     * 注意：大O表示法仅仅是一种粗略的分析模型，是一种估算，能帮助我们短时间内了解一个算法的执行效率
     *
     *
     *
     *
     * 对数阶的细节：
     * 对数阶一般省略底数
     *
     * 常见复杂度
     * 12                       O(1):常数阶
     * 2n+3                     O(n)：线性阶
     * 4n^2+2n+4                O(n^2):平方阶
     * 4log2n+25                O(logn):对数阶
     * 3n+2nlog3n+15            O(nlogn): nlogn阶
     * 4n^3+3n^2+2n+100         O(n^3): 立方阶
     * 2^n                      O(2^n)：指数阶
     *
     * O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)
     *
     */
}
